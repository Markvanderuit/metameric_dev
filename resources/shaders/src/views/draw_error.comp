#version 460 core

#include <guard.glsl>
#include <math.glsl>

// Layout declarations
layout(local_size_x = 256) in;
layout(std140)             buffer;
layout(std430)             buffer;

// Buffer declarations
layout(binding = 0) restrict readonly  buffer b_in_a { vec3 data[]; } in_a;
layout(binding = 1) restrict readonly  buffer b_in_b { vec3 data[]; } in_b;
layout(binding = 2) restrict writeonly buffer b_err  { vec4 data[]; } out_err;
layout(binding = 0) uniform b_unif { uint n; } unif;

void main() {
  const uint i = gl_GlobalInvocationID.x;
  guard(i < unif.n);

  vec3 err = /* 128.f *  */abs(in_a.data[i] - in_b.data[i]);
  out_err.data[i] = vec4(err, hsum(err));
}