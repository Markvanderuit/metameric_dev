#include <preamble.glsl>
#include <math.glsl>
#include <bary.glsl>

// Enable necessary subgroup extensions
extension(GL_KHR_shader_subgroup_basic,      require)
extension(GL_KHR_shader_subgroup_clustered,  require)

// General layout rule declarations
layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

// Shader storage buffer declarations
layout(binding = 0) restrict readonly  buffer b_bary { Bary4 data[]; } bary_in;
layout(binding = 1) restrict readonly  buffer b_vert { vec3  data[]; } vert_in;
layout(binding = 2) restrict readonly  buffer b_elem { uvec3 data[]; } elem_in; // unused
layout(binding = 3) restrict writeonly buffer b_colr { vec3  data[]; } colr_out;

// Uniform buffer declarations
layout(binding = 0) uniform b_unif {
  uint n;
  uint n_verts;
  uint n_elems; // unused
  uint selection[generalized_weights];
} unif;

const uint sg_cluster_size = generalized_weights;

void main() {
  const uint i = gl_GlobalInvocationID.x / sg_cluster_size;
  const uint j = gl_GlobalInvocationID.x % sg_cluster_size;

  guard(i < unif.n);

  vec3 w = (j < unif.n_verts && unif.selection[j] != 0) 
          ? vert_in.data[j] * bary_in.data[i][j / 4][j % 4] 
          : vec3(0);
  vec3 s = subgroupClusteredAdd(w, sg_cluster_size); // / b_bsum_in.data[i];

  if (j == 0)
    colr_out.data[i] = s;
}