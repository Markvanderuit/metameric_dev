#include <preamble.glsl>
#include <math.glsl>
#include <moments.glsl>
#include <render/detail/scene_types.glsl>

// General layout rule declarations
layout(local_size_x = 16, local_size_y = 16) in;
layout(std430) buffer;
layout(std140) uniform;

// Uniform buffer declarations
layout(binding = 0) uniform b_buff_unif {
  uint object_i;
} unif;

// Storage buffer declarations
layout(binding = 0) restrict readonly buffer b_buff_coeffs {
  float[moment_coeffs] data[];
} buff_coeffs;

// Image binding declarations
layout(binding = 0, rgba32f)  uniform readonly   image2D b_image_r;
layout(binding = 1, rgba32ui) uniform writeonly uimage2D b_image_w;

void main() {
  // ivec2 xy = gl_GlobalInvocationID.xy;
  // TODO guard
  
  // Load barycentric coordinates and index of spectral tetrahedron, but escape
  // early on all black
  vec4 bary = imageLoad(b_image_r, ivec2(gl_GlobalInvocationID.xy));
  guard(!all(is_zero(bary)));
  uint index = uint(bary.w);
  bary.w = 1.f - hsum(bary.xyz);

  // Mix coefficients from different vertices together by their barycentrics
  float[moment_coeffs] coeffs;
  for (uint i = 0; i < moment_coeffs; ++i) {
    coeffs[i] = 0.f;
    for (uint j = 0; j < 4; ++j)
      coeffs[i] += bary[j] * buff_coeffs.data[4 * index + j][i];
  } // for (uint i)

  // Store result back to image
  imageStore(b_image_w, ivec2(gl_GlobalInvocationID.xy), pack_moments_12x10(coeffs));
}