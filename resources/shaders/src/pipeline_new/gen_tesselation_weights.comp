#version 460 core

#include <guard.glsl>
#include <scene.glsl>
#include <math.glsl>

// Wrapper data packing tetrahedron data [x, y, z, w]; 64 bytes under std430
struct Elem {
  mat3 inv; // Inverse of 3x3 matrix [x - w, y - w, z - w]
  vec3 sub; // Subtractive component w
};

// General layout rule declarations
layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

// Buffer declarations
layout(binding = 0) uniform b_unif_camera {
  uint data; // TODO impl ...
} unif_camera;
layout(binding = 0) restrict readonly buffer b_buff_objects {
  ObjectInfo[] data;
} buff_objects;
layout(binding = 1) restrict readonly buffer b_buff_textures {
  TextureInfo[] data;
} buff_textures;
layout(binding = 2) restrict readonly buffer b_buff_uplifts {
  uint data[]; // TODO impl ...
} buff_uplifts;
layout(binding = 3) restrict readonly buffer b_buff_pack { 
  Elem data[]; 
} pack_buffer;

// Sampler declarations
layout(binding = 1) uniform sampler2DArray b_txtr_3f;
layout(binding = 2) uniform sampler2DArray b_uplf_4f;

// Shared memory declarations
shared Elem s_elem_in[512];

void main() {
  // TODO impl ...
}