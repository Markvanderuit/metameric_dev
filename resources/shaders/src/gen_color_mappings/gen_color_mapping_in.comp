#version 460 core

#include <guard.glsl>
#include <mapping_invoc.glsl>

layout(local_size_x = 256) in;

layout(binding = 0, std430) restrict readonly  buffer b_0 { Spec    b_0_spectral_buffer[]; };
layout(binding = 1, std430) restrict readonly  buffer b_1 { Mapping b_1_mappings[];        };
layout(binding = 2, std430) restrict writeonly buffer b_2 { vec3    b_2_color_buffer[];    };

layout(location = 0) uniform uint u_n;
layout(location = 1) uniform uint u_mapping_i;

void main() {
  const uint i = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
  guard(i < u_n);
  
  // Load objects from buffers
  Spec sd   = b_0_spectral_buffer[i];
  Mapping m = b_1_mappings[u_mapping_i];

  // Construct and apply color mapping
  CMFS cs = finalize_mapping(m, sd);
  vec3 v  = in_matmul(cs, sd);

  // Store resulting color
  b_2_color_buffer[i] = v;
}