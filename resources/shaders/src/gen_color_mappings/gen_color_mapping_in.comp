#version 460 core

// Set NVidia-CG flags
#pragma optionNV(fastmath on)
#pragma optionNV(inline   all)
#pragma optionNV(unroll   all)
#pragma optionNV(strict   on)

layout(local_size_x = 256) in;
layout(std430)             buffer;

#include <guard.glsl>
#include <mapping_invoc.glsl>

layout(binding = 0) restrict readonly  buffer b_0 { Spec data[]; } b_spec;
layout(binding = 1) restrict readonly  buffer b_1 { Mapp data[]; } b_mapp;
layout(binding = 2) restrict writeonly buffer b_2 { vec3 data[]; } b_out;

layout(location = 0) uniform uint u_n;
layout(location = 1) uniform uint u_mapping_i;

void main() {
  const uint i = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
  guard(i < u_n);
  
  // Load objects from buffers
  Spec sd = b_spec.data[i];
  Mapp m  = b_mapp.data[u_mapping_i];

  // Construct and apply color mapping
  CMFS cs = finalize_mapping(m, sd);
  vec3 v  = in_matmul(cs, sd);

  // Store resulting color
  b_out.data[i] = v;
}