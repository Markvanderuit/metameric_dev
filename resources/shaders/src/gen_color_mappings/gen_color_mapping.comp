#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

#include <guard.glsl>
#include <spectrum_invoc.glsl>

// Use shorthand for clustered types
#define Bary float[barycentric_weights]

layout(local_size_x = 256) in;
layout(std140)             uniform;
layout(std430)             buffer;

layout(binding = 0) restrict readonly  buffer b_0 { Bary  data[]; } b_bary_in;
layout(binding = 1) restrict readonly  buffer b_1 { float data[]; } b_bsum_in;
layout(binding = 2) restrict readonly  buffer b_2 { vec3  data[]; } b_gamut_in;
layout(binding = 3) restrict writeonly buffer b_3 { vec3  data[]; } b_colr_out;
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_vertices;
} b_unif;

shared vec3 s_gamut[barycentric_weights];

// Load shared gamut data into memory
void load_shared() {
  for (uint i = gl_LocalInvocationID.x; i < b_unif.n_vertices; i += gl_WorkGroupSize.x)
    s_gamut[i] = b_gamut_in.data[i];
  memoryBarrierShared();
  barrier();
}

void main() {
  const uint i = gl_GlobalInvocationID.x;
  load_shared();
  guard(i < b_unif.n);

  Bary b = b_bary_in.data[i];
  float bsum = b_bsum_in.data[i];

  // Output color is convex combination of gamut vertices
  vec3 v = vec3(0);
  for (uint j = 0; j < b_unif.n_vertices; ++j)
    v += (b[j] / bsum) * s_gamut[j];
    
  b_colr_out.data[i] = v;
}