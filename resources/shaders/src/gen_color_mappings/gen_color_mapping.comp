#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

#include <guard.glsl>
#include <bary.glsl>
#include <spectrum_invoc.glsl>

layout(local_size_x = 256) in;
layout(std140)             uniform;
layout(std430)             buffer;

layout(binding = 0) restrict readonly  buffer b_0 { Bary4 data[]; } b_bary_in;
layout(binding = 1) restrict readonly  buffer b_1 { vec3  data[]; } b_gamut_in;
layout(binding = 2) restrict writeonly buffer b_2 { vec3  data[]; } b_colr_out;
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_verts;
} b_unif;

shared vec3 s_gamut[barycentric_weights];

// Load shared gamut data into memory
void load_shared() {
  for (uint i = gl_LocalInvocationID.x; i < b_unif.n_verts; i += gl_WorkGroupSize.x)
    s_gamut[i] = b_gamut_in.data[i];
  
  memoryBarrierShared();
  barrier();
}

const uint sg_cluster_size = barycentric_weights / 4; // so 4 then

void main() {
  load_shared();

  const uint i = gl_GlobalInvocationID.x / sg_cluster_size; // 000011112222
  const uint j = gl_GlobalInvocationID.x % sg_cluster_size; // 012301230123

  guard(i < b_unif.n);

  // Output color is convex combination of gamut vertices
  vec4 w = b_bary_in.data[i][j];
  vec3 v = vec3(0);
  for (uint k = 0; k < 4; ++k)
    v += w[k] * s_gamut[j * 4 + k];
  v = subgroupClusteredAdd(v, sg_cluster_size);

  if (j == 0)
    b_colr_out.data[i] = v;
}