#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require

// Set NVidia-CG flags
#pragma optionNV(fastmath on)
#pragma optionNV(inline   all)
#pragma optionNV(unroll   all)
#pragma optionNV(strict   on)

layout(local_size_x = 256) in;
layout(std430)             buffer;

#include <guard.glsl>
#include <mapping_invoc.glsl>
#include <mapping_subgroup.glsl>

layout(binding = 0) restrict readonly  buffer b_0 { InSpec data[]; } b_spec;
layout(binding = 1) restrict readonly  buffer b_1 { InMapp data[]; } b_mapp;
layout(binding = 2) restrict writeonly buffer b_2 { vec3   data[]; } b_colr;

layout(location = 0) uniform uint u_n;
layout(location = 1) uniform uint u_mapping_i;

SgSpec load_spec(uint j) {
  SgSpec s;
  sg_spec_scatter(s, b_spec.data[j]);
  return s;
}

SgMapp load_mapp(uint j) {
  SgMapp s;
  sg_mapp_scatter(s, b_mapp.data[j]);
  return s;
}

void main() {
  const uint i = gl_WorkGroupID.x * gl_NumSubgroups.x + gl_SubgroupID.x;
  guard(i < u_n);

  // Load reflectance and mapping data into subgroup format
  SgSpec sd = load_spec(i);
  SgMapp m  = load_mapp(u_mapping_i);

  // Compute and apply color mapping
  SgCMFS cs = finalize_mapp(m, sd);
  vec3   v  = sg_matmul(cs, sd);

  // Store result using elected invoc of subgroup
  if (subgroupElect()) {
    b_colr.data[i] = v;
  }
}