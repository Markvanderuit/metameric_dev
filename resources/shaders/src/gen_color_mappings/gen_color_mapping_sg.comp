#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require

// Set NVidia-CG specific flags
#pragma optionNV(fastmath on)
#pragma optionNV(inline   all)
#pragma optionNV(unroll   all)
#pragma optionNV(strict   on)
// #pragma optionNV(fastprecision on)
// #pragma optionNV(ifcvt         all)

layout(local_size_x = 256) in;

#include <guard.glsl>
#include <mapping_invoc.glsl>
#include <mapping_subgroup.glsl>

layout(binding = 0, std430) restrict readonly  buffer b_0 { Spec    b_0_spectra[];  };
layout(binding = 1, std430) restrict readonly  buffer b_1 { Mapping b_1_mappings[]; };
layout(binding = 2, std430) restrict writeonly buffer b_2 { vec3    b_2_colors[];   };

layout(location = 0) uniform uint u_n;
layout(location = 1) uniform uint u_mapping_i;

void main() {
  const uint wg = gl_WorkGroupID.x * gl_NumSubgroups.x + gl_SubgroupID.x;
  guard(wg < u_n);

  // Load reflectance and mapping data into subgroup format
  SgSpec sd;
  SgMapping m;
  sg_scatter_spec(sd, b_0_spectra[wg]);
  sg_scatter_mapp(m, b_1_mappings[u_mapping_i]);

  // Compute and apply color mapping
  SgCMFS cs = finalize_mapping(m, sd);
  vec3 v    = sg_matmul(cs, sd);

  // Store result using elected invoc of subgroup
  if (subgroupElect()) {
    b_2_colors[wg] = v;
  }
}