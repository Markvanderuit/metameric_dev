#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

// Use shorthand for clustered types
#define Spec ClSpec
#define CMFS ClCMFS
#define Mapp ClMapp

#include <guard.glsl>
#include <mapping_invoc.glsl>
#include <mapping_cluster.glsl>

layout(local_size_x = 256) in;
layout(std140)             uniform;
layout(std430)             buffer;

layout(binding = 0) restrict readonly  buffer b_0 { InSpec data[]; } b_spec;
layout(binding = 1) restrict readonly  buffer b_1 { InMapp data[]; } b_mapp;
layout(binding = 3) restrict readonly  buffer b_3 { uint   data[]; } b_vali;
layout(binding = 2) restrict writeonly buffer b_2 { vec3   data[]; } b_colr;
layout(binding = 0) uniform u_0 {
  uint n;
  uint mapping_i;
} b_unif;

shared InMapp s_mapping;

// Load mapping data into shared memory
void load_mapp_shared_in() {
  const uint mapping_i = b_unif.mapping_i;
  const uint i = gl_LocalInvocationID.x % wavelength_samples_al;
  const uint j = gl_LocalInvocationID.x / wavelength_samples_al;

  if (j < 3 && i < wavelength_samples) 
    s_mapping.cmfs[j][i] = b_mapp.data[mapping_i].cmfs[j][i];
  if (j == 0 && i < wavelength_samples) 
    s_mapping.illuminant[i] = b_mapp.data[mapping_i].illuminant[i];
  if (j == 0 && i == 0) 
    s_mapping.n_scatters = b_mapp.data[mapping_i].n_scatters;
  
  memoryBarrierShared();
  barrier();
}

// Load clustered mapping from shared memory
Mapp load_mapp_shared_cl() {
  Mapp s;
  cl_mapp_scatter(s, s_mapping);
  return s;
}

// Load clustered spectrum from buffer
Spec load_spec(uint i) {
  Spec s;
  cl_spec_scatter(s, b_spec.data[i]);
  return s;
}

void main() {
  const uint i =  gl_GlobalInvocationID.x / cl_spectrum_invc_n;
  guard(i < b_unif.n);

  // Load mapping data into shared memory
  load_mapp_shared_in();

  // Load reflectance and color system, then apply to obtain color signal
  Spec sd = load_spec(i);
  CMFS cs = finalize_mapp(load_mapp_shared_cl(), sd);
  vec3 v  = cl_mmul(cs, sd);
  
  // Sture results using first invocation
  if (cl_bin_elect())
    b_colr.data[i] = v;
}