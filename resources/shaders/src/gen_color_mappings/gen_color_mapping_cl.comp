#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

// Set NVidia-CG flags
#pragma optionNV(fastmath on)
#pragma optionNV(inline   all)
#pragma optionNV(unroll   all)
#pragma optionNV(strict   on)

#include <guard.glsl>
#include <mapping_invoc.glsl>
#include <mapping_cluster.glsl>

layout(local_size_x = 256) in;
layout(std430)              buffer;

layout(binding = 0) restrict readonly  buffer b_0 { Spec data[]; } b_spec;
layout(binding = 1) restrict readonly  buffer b_1 { Mapp data[]; } b_mapp;
layout(binding = 2) restrict writeonly buffer b_2 { vec3 data[]; } b_colr;

layout(location = 0) uniform uint u_n;
layout(location = 1) uniform uint u_mapping_i;

shared Mapp mp_shared;

SgSpec load_spec(uint i) {
  SgSpec s;
  sg_spec_scatter(s, b_spec.data[i]);
  return s;
}

SgMapp load_mapp_shared() {
  SgMapp s;
  sg_mapp_scatter(s, mp_shared);
  return s;
}

void main() {
  const uint i =  gl_GlobalInvocationID.x / sg_spectrum_ninvc;
  guard(i < u_n);

  // Load mapping data into shared memory
  if (gl_LocalInvocationID.x == 0) {
    mp_shared = b_mapp.data[u_mapping_i];
  }
  memoryBarrierShared();
  barrier();

  // Load reflectance and mapping data into clustered format
  SgSpec sd = load_spec(i);
  SgMapp mp = load_mapp_shared();

  // Compute and apply color mapping
  SgCMFS cs = finalize_mapping(mp, sd);
  vec3   v  = sg_matmul(cs, sd);

  // Sture results using first invocation 
  if (sg_bin_elect()) {
    b_colr.data[i] = v;
  }
}