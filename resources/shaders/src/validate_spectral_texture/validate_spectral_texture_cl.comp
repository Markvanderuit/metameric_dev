#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

#include <guard.glsl>
#include <spectrum_invoc.glsl>
#include <spectrum_cluster.glsl>

#define Spec ClSpec           // Use shorthand for clustered types

layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

layout(binding = 0) restrict readonly  buffer b_0 { InSpec data[]; } b_spec_texture;
layout(binding = 1) restrict writeonly buffer b_1 { uint   data[]; } b_vali_texture;
layout(binding = 0) uniform u_o {
  uint n;
} b_size;

Spec load_spec_texture(uint i) {
  Spec s;
  cl_spec_gather(s, b_spec_texture.data[i]);
  return s;
}

void main() {
  const uint i = gl_GlobalInvocationID.x / cl_spectrum_invc_n;
  guard(i < b_size.n);

  // Load spectral data from buffer
  Spec s = load_spec_texture(i);

  // Test spectral values for out-of-bounds-ing
  bool b = cl_hmin(s) < 0.f || cl_hmax(s) > 1.f;

  // Store results
  if (cl_bin_elect()) {
    bitfieldInsert(b_vali_texture.data[i], uint(b), int(i % 32), 1);
  }
}