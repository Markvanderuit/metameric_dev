#version 460 core

#include <guard.glsl>
#include <spectrum_invoc.glsl>

#define Wght float[16]
#define Spec InSpec

layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

layout(binding = 0) restrict readonly  buffer b_0 { Spec data[]; } b_spectra_in;
layout(binding = 1) restrict readonly  buffer b_1 { Wght data[]; } b_weights_in;
layout(binding = 2) restrict writeonly buffer b_2 { Spec data[]; } b_spectra_out;

// Uniform buffer declarations
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_verts;
  uint n_elems;
} b_size;

void main() {
  const uint i = gl_GlobalInvocationID.x;
  guard(i < b_size.n);
  
  Wght w = b_weights_in.data[i];
  Spec s = in_spectrum(0.f);

  for (uint j = 0; j < b_size.n_verts; ++j) {
    s = in_add(s, in_mul(b_spectra_in.data[j], w[j]));
  }

  b_spectra_out.data[i] = s;
}