#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

#include <guard.glsl>
#include <bary.glsl>
#include <spectrum_invoc.glsl>
#include <spectrum_cluster.glsl>

// Use shorthand for clustered types
#define InWght float[generalized_weights]
#define Spec ClSpec

// General layout rule declarations
layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

// Shader storage buffer declarations
layout(binding = 0) restrict readonly  buffer b_0 { InSpec data[]; } b_spectra_in;
layout(binding = 1) restrict readonly  buffer b_1 { InWght data[]; } b_weights_in;
layout(binding = 2) restrict writeonly buffer b_2 { InSpec data[]; } b_spectra_out;

// Uniform buffer declarations
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_verts;
} b_size;

// Shared memory declarations
shared InWght s_weights_in[gl_WorkGroupSize.x / cl_spectrum_invc_n];

void load_shared_weights() {
  const uint g = gl_GlobalInvocationID.x / cl_spectrum_invc_n;
  const uint i = gl_LocalInvocationID.x  / cl_spectrum_invc_n;
  const uint j = gl_LocalInvocationID.x  % cl_spectrum_invc_n;

  for (uint j_ = j; j_ < b_size.n_verts; j_ += cl_spectrum_invc_n)
    s_weights_in[i][j_] = b_weights_in.data[g][j_];

  barrier();
  memoryBarrierShared();
}

Spec load_spec_in(uint i) {
  Spec s;
  cl_spec_scatter(s, b_spectra_in.data[i]);
  return s;
}

void store_spec_out(in Spec s, uint i) {
  cl_spec_gather(b_spectra_out.data[i], s);
}

void main() {
  const uint i = gl_GlobalInvocationID.x / cl_spectrum_invc_n;
  const uint i_= gl_LocalInvocationID.x  / cl_spectrum_invc_n;
  
  load_shared_weights();

  guard(i < b_size.n);

  Spec s = Spec(0);
  for (uint j = 0; j < b_size.n_verts; ++j)
    s += s_weights_in[i_][j] *  load_spec_in(j);
    
  store_spec_out(s, i);
}