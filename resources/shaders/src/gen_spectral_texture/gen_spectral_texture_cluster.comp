#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

// Set NVidia-CG flags
#pragma optionNV(fastmath on)
#pragma optionNV(inline   all)
#pragma optionNV(unroll   all)
#pragma optionNV(strict   on)

#include <guard.glsl>
#include <spectrum_invoc.glsl>
#include <spectrum_cluster.glsl>

layout(local_size_x = 256) in;
layout(std430)             buffer;

layout(binding = 0) restrict readonly  buffer b_0 { vec3 data[4]; } b_color_gamut;
layout(binding = 1) restrict readonly  buffer b_1 { Spec data[4]; } b_spectral_gamut;
layout(binding = 2) restrict readonly  buffer b_2 { vec3 data[];  } b_color_texture;
layout(binding = 3) restrict writeonly buffer b_3 { Spec data[];  } b_spectral_texture;

layout(location = 0) uniform uint u_n;
layout(location = 1) uniform mat3 u_barycentric_transform;

vec4 to_barycentric(in vec3 p) {
  // TODO preprocess this matrix+vector in uniform buffer instead
  mat3 t = inverse(mat3(b_color_gamut.data[0] - b_color_gamut.data[3],
                        b_color_gamut.data[1] - b_color_gamut.data[3],
                        b_color_gamut.data[2] - b_color_gamut.data[3]));
  vec3 abc = t * (p - b_color_gamut.data[3]);
  return vec4(abc, 1.f - in_hsum(abc));
}

SgSpec load_gamut_spectrum(uint i) {
  SgSpec s;
  sg_bin_scatter(s, b_spectral_gamut.data[i]);
  return s;
}

void store_texture_spectrum(in SgSpec s, uint i) {
  sg_bin_gather(b_spectral_texture.data[i], s);
}

void main() {
  const uint i = gl_GlobalInvocationID.x / sg_spectrum_ninvc;
  guard(i < u_n);

  // Obtain barycentric coordinates for positions in the color texture
  vec4 abcd = to_barycentric(b_color_texture.data[i]);

  // Perform gamut maping
  SgSpec sd = sg_spectrum(0.f);
  for (uint i = 0; i < 4; ++i)
    sd = sg_add(sd, sg_mul(load_gamut_spectrum(i), abcd[i]));
  sd = sg_clamp(sd, 0.f, 1.f);

  // Store results to buffer
  store_texture_spectrum(sd, i);
}