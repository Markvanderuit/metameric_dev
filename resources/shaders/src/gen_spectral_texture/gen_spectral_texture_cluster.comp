#version 460 core

// Enable necessary subgroup extensions
#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_clustered  : require

// Set NVidia-CG flags
#pragma optionNV(fastmath on)
#pragma optionNV(inline   all)
#pragma optionNV(unroll   all)
#pragma optionNV(strict   on)

#include <guard.glsl>
#include <spectrum_invoc.glsl>
#include <spectrum_cluster.glsl>

layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

layout(binding = 0) restrict readonly  buffer b_0 { Spec data[4]; } b_spectral_gamut;
layout(binding = 1) restrict readonly  buffer b_1 { vec3 data[];  } b_color_texture;
layout(binding = 2) restrict writeonly buffer b_2 { Spec data[];  } b_spectral_texture;

layout(location = 0) uniform uint u_n;
layout(location = 1) uniform vec3 u_bary_sub;
layout(location = 2) uniform mat3 u_bary_inv;

shared Spec s_spectral_gamut[4];

SgSpec load_spec_gamut(uint i) {
  SgSpec s;
  sg_bin_scatter(s, s_spectral_gamut[i]);
  return s;
}

void store_spec_texture(in SgSpec s, uint i) {
  sg_bin_gather(b_spectral_texture.data[i], s);
}

void main() {
  const uint i = gl_GlobalInvocationID.x / sg_spectrum_ninvc;
  guard(i < u_n);

  // Load spectral gamut buffer data into shared memory
  if (gl_LocalInvocationID.x == 0)
    s_spectral_gamut = b_spectral_gamut.data;
  memoryBarrierShared();
  barrier();

  // Obtain barycentric coordinates for positions in the color texture
  vec3 bar_ = u_bary_inv * (b_color_texture.data[i] - u_bary_sub);
  vec4 bary = vec4(bar_, 1.f - in_hsum(bar_));
  
  // Perform gamut mapping by applying barycentric coordinates to spectral gamut
  SgSpec sd = bary[0] * load_spec_gamut(0) + bary[1] * load_spec_gamut(1)
            + bary[2] * load_spec_gamut(2) + bary[3] * load_spec_gamut(3);

  // Store results to buffer
  store_spec_texture(clamp(sd, 0.f, 1.f), i);
}