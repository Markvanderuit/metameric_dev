#include <preamble.glsl>
#include <render/ray.glsl>
#include <render/load/blas.glsl>
#include <render/load/emitter.glsl>
#include <render/load/object.glsl>
#include <render/load/defaults.glsl>

// General layout rule declarations
layout(local_size_x_id = 0) in;
layout(std140) uniform;
layout(std430) buffer;

layout(binding = 0) uniform b_buff_sensor_info {
  vec3 origin;    /* padd to 16 bytes */ uint p0;
  vec3 direction; /* padd to 16 bytes */ uint p1;
} buff_sensor_info;
layout(binding = 1) uniform b_buff_object_info {
  uint n;
  ObjectInfo data[met_max_objects];
} buff_objects;
layout(binding = 2) uniform b_buff_blas_info {
  uint n;
  BLASInfo data[met_max_meshes];
} buff_blas_info;
layout(binding = 3) uniform b_buff_emitter_info {
  uint n;
  EmitterInfo data[met_max_emitters];
} buff_emitter_info;
layout(binding = 4) uniform b_buff_envmap_info {
  bool envm_is_present;
  uint envm_i;
} buff_envmap_info;

// Storage buffer declarations
layout(binding = 0) restrict readonly buffer b_buff_blas_node0 { BVHNode0Pack data[]; } buff_blas_node0;
layout(binding = 1) restrict readonly buffer b_buff_blas_node1 { BVHNode1Pack data[]; } buff_blas_node1;
layout(binding = 2) restrict readonly buffer b_buff_blas_prim  { PrimitivePack data[]; } buff_blas_prim;
layout(binding = 3) restrict coherent buffer b_buff_output { 
  Ray data;
} buff_output;
layout(binding = 4) restrict readonly buffer b_buff_tlas_prim { 
  uint data[]; 
} buff_tlas_prim;

declare_scene_emitter_data(buff_emitter_info.data, buff_emitter_info.n, buff_envmap_info);
declare_scene_object_data(buff_objects.data, buff_objects.n);
declare_scene_blas_data(buff_blas_prim.data, buff_blas_node0.data, buff_blas_node1.data, buff_blas_info.data);
declare_distr_sampler_default(emitters);
declare_distr_sampler_default(wavelength);

// All includes from and in here rely on buffers/samplers to be declared
#include <render/scene.glsl>
#include <render/sensor.glsl>

void main() {
  // Clamp invocations to requested size
  guard(gl_GlobalInvocationID.x == 0);

  // Load sensor data as ray
  Ray ray = init_ray(buff_sensor_info.origin, buff_sensor_info.direction);

  // Intersect ray with scene
  scene_intersect(ray);

  // Store result to buffer
  buff_output.data = ray;
}