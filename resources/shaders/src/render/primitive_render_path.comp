#include <preamble.glsl>
#include <sampler/uniform.glsl>
#include <render/load/blas.glsl>
#include <render/load/emitter.glsl>
#include <render/load/object.glsl>
#include <render/load/cmfs.glsl>
#include <render/load/illuminant.glsl>
#include <render/load/texture.glsl>
#include <render/load/defaults.glsl>

// General layout rule declarations
layout(local_size_x = 16, local_size_y = 16) in;
layout(std140) uniform;
layout(std430) buffer;

// Specialization constant declarations
layout(constant_id = 0) const uint max_depth = 0;              // Maximum path depth (unused if 0)
layout(constant_id = 1) const uint rr_depth  = path_max_depth; // Russian roulette starting depth
layout(constant_id = 2) const bool use_alpha = false;          // On initial ray miss, return 0 alpha?
layout(constant_id = 3) const bool use_debug = false;          // Override and enable debug queries

struct WavelengthDistribution {
  float sum;
  float func[wavelength_samples];
  float cdf[wavelength_samples + 1];
};

struct EmitterDistribution {
  float sum;
  float func[met_max_emitters];
  float cdf[met_max_emitters + 1];
};

// Uniform buffer declarations
layout(binding = 0) uniform b_buff_sensor_info {
  mat4  full_trf;
  mat4  proj_trf;
  mat4  view_trf;
  uvec2 film_size; 
} buff_sensor_info;
layout(binding = 1) uniform b_buff_sampler_state {
  uint spp_per_iter;
  uint spp_curr;
  uint pixel_checkerboard;
  uint pixel_curr;
} buff_sampler_state;
layout(binding = 2) uniform b_buff_object_info {
  uint n;
  ObjectInfo data[met_max_objects];
} buff_objects;
layout(binding = 3) uniform b_buff_blas_info {
  uint n;
  BLASInfo data[met_max_meshes];
} buff_blas_info;
layout(binding = 4) uniform b_buff_emitter_info {
  uint n;
  EmitterInfo data[met_max_emitters];
} buff_emitter_info;
layout(binding = 5) uniform b_buff_wvls_distr {
  WavelengthDistribution data;
} buff_wvls_distr;
layout(binding = 6) uniform b_buff_emitters_distr {
  EmitterDistribution data;
} buff_emitters_distr;
layout(binding = 7) uniform b_buff_envmap_info {
  bool envm_is_present;
  uint envm_i;
} buff_envmap_info;
layout(binding = 8) uniform b_buff_object_coef_info {
  uint n;
  AtlasInfo data[met_max_textures];
} buff_object_coef_info;
layout(binding = 9) uniform b_buff_emitter_coef_info {
  uint n;
  AtlasInfo data[met_max_textures];
} buff_emitter_coef_info;
layout(binding = 10) uniform b_buff_object_brdf_info {
  uint n;
  AtlasInfo data[met_max_textures];
} buff_object_brdf_info;

// Storage buffer declarations
layout(binding = 0) restrict readonly buffer b_buff_blas_node { BVHNodePack   data[]; } buff_blas_node;
layout(binding = 1) restrict readonly buffer b_buff_blas_prim { PrimitivePack data[]; } buff_blas_prim;

// Texture/image units, ergo samplers and output images
layout(binding = 0)          uniform sampler1DArray b_illm_1f;         // Illuminant function data, 1 component
layout(binding = 1)          uniform sampler1DArray b_cmfs_3f;         // Observer function data, 3 components
layout(binding = 2)          uniform sampler1DArray b_bsis_1f;         // Basis function data, 1 component
layout(binding = 3)          uniform sampler2DArray b_object_coef_4f;  // Texture atlas storing packed coefficients for uplifted reflectance
layout(binding = 4)          uniform sampler2DArray b_object_brdf_2f;  // Texture atlas storing packed secondary brdf data
layout(binding = 5)          uniform sampler2DArray b_emitter_coef_4f; // Texture atlas storing packed coefficients for uplifted illuminants
layout(binding = 6)          uniform sampler2DArray b_emitter_scle_1f; // Texture atlas storing scalar value for uplifted illuminants
layout(binding = 0, rgba32f) uniform restrict image2D b_film;          // Target film, averaged over frames


// BLAS info and stack live in shared memory
// per 256 invocs; 256b _ 6kb
shared BLASInfo _blas_info[met_max_meshes];
shared uint     _blas_stack[gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z][5];
#define blas_stck _blas_stack[gl_LocalInvocationIndex]

// Declare scene data; creates functions to access and interact with
// scene data without knowing the exact names of buffers, textures, etc
declare_distr_sampler(wavelength, buff_wvls_distr.data, wavelength_samples);
declare_distr_sampler(emitters, buff_emitters_distr.data, met_max_emitters);
declare_scene_cmfs_data(b_cmfs_3f);
declare_scene_illuminant_data(b_illm_1f);
declare_scene_emitter_data(buff_emitter_info.data, buff_emitter_info.n, buff_envmap_info);
declare_scene_texture_data(buff_object_coef_info.data, buff_object_brdf_info.data, buff_emitter_coef_info.data, b_object_coef_4f, b_object_brdf_2f, b_emitter_coef_4f, b_emitter_scle_1f, b_bsis_1f);
declare_scene_object_data(buff_objects.data, buff_objects.n);
declare_scene_blas_data(buff_blas_prim.data, buff_blas_node.data, _blas_info);

// All includes from here on out require scene data to be declared above;
// scene data that was not declared is default-set in defaults.glsl
#include <render/path.glsl>

// Preload object/mesh/emitter/texture info objects into shared memory
void load_shared() {
  const uint iter = hprod(gl_WorkGroupSize.xyz);
  for (uint i = gl_LocalInvocationIndex; i < buff_blas_info.n; i += iter)
    _blas_info[i] = buff_blas_info.data[i];
  memoryBarrierShared();
  barrier();
}

// Initial sample state is seeded from pixel index, and rotated by multiplication
SamplerState get_sampler_state(ivec2 xy, uint i) {
  uint state = 1 + uint(xy.x) + uint(xy.y) * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
  return state * (1 + i);
}

// Select the correct pixel to render for e.g. checkerboarding
ivec2 xy() {
  uvec2 xy = gl_GlobalInvocationID.xy;
  if (bool(buff_sampler_state.pixel_checkerboard))
    xy = xy 
       * uvec2(2, 1) 
       + uvec2((xy.y + buff_sampler_state.pixel_curr) % 2, 0);
  return ivec2(xy);
}

void main() {
  // Preload some objects into shared memory
  load_shared();

  // Take spp_per_iter samples and add to target measure
  for (uint i = buff_sampler_state.spp_curr;
            i < buff_sampler_state.spp_curr + buff_sampler_state.spp_per_iter;
          ++i) {
    // Initialize sampler state
    SamplerState state = get_sampler_state(xy(), i);

    // Generate a sensor sample; initial ray and such
    SensorSample sensor_sample = sample_sensor(
      FilmSensor(buff_sensor_info.proj_trf, buff_sensor_info.view_trf, buff_sensor_info.film_size), 
      xy(), i, next_3d(state));

    vec4 L;
    float alpha;
    if (!use_debug) {      
      // Sample incident radiance along ray for given wavelengths, weighted by probability;
      // optionally capture alpha (or set it to black if ignored)
      L = Li(sensor_sample, state, alpha);
      if (!use_alpha)
        alpha = 1.f;
    } else {
      // Instead output debug value
      L = Li_debug(sensor_sample, state);
    }
    
    // Ignore invocations above requested film size; we keep invocations
    // alive and path-tracing - even outside the exact film size - for subgroup shenanigans
    guard_continue(all(lessThan(xy(), buff_sensor_info.film_size)));

    // The accumulated rgba measure is the current value in the film. We integrate
    // over the color system and add to this measure in a running average.
    vec4 measure = imageLoad(b_film, xy());
    if (!use_debug) {    
      measure += (vec4(sensor_apply(sensor_sample, L), alpha) - measure) / float(i + 1);
    } else {
      measure += (L - measure) / float(i + 1);
    }
    if (!use_alpha)
      measure.w = 1.f;
    imageStore(b_film, xy(), measure);
  } // for (uint spp_iter)
}