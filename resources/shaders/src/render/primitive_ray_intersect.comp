#include <preamble.glsl>
#include <guard.glsl>
#include <math.glsl>
#include <ray.glsl>
#include <bvh.glsl>
#include <scene.glsl>

// General layout rule declarations
layout(local_size_x_id = 0) in;
layout(std140)              uniform;
layout(std430)              buffer;

// Storage buffer declarations; scene intersection data
layout(binding = 0) restrict readonly buffer b_buff_bvhs_info { BVHInfo     data[]; } buff_bvhs_info;
layout(binding = 1) restrict readonly buffer b_buff_bvhs_node { BVHNodePack data[]; } buff_bvhs_node;
layout(binding = 2) restrict readonly buffer b_buff_bvhs_prim { BVHPrimPack data[]; } buff_bvhs_prim;
layout(binding = 3) restrict readonly buffer b_buff_objc_info { ObjectInfo  data[]; } buff_objc_info;

// Shared memory declarations; scene intersection data
shared ObjectInfo s_objc_info[8];
shared BVHInfo    s_bvhs_info[8];
shared uint       s_stack[gl_WorkGroupSize.x][16];

// Define names of scene buffers to replace preproc in intersect.glsl
// to work around glsl's lack of ssbo argument passing
#define isct_n_objects      buff_objc_info.data.length()
#define isct_stack          s_stack[gl_LocalInvocationID.x ]
#define isct_buff_objc_info s_objc_info
#define isct_buff_bvhs_info s_bvhs_info
#define isct_buff_bvhs_node buff_bvhs_node.data
#define isct_buff_bvhs_prim buff_bvhs_prim.data
#include <intersect.glsl>

void load_isct_shared() {
  for (uint i = gl_LocalInvocationID.x; i < buff_objc_info.data.length(); i += gl_WorkGroupSize.x)
    s_objc_info[i] = buff_objc_info.data[i];
  for (uint i = gl_LocalInvocationID.x; i < buff_bvhs_info.data.length(); i += gl_WorkGroupSize.x)
    s_bvhs_info[i] = buff_bvhs_info.data[i];
  memoryBarrierShared();
  barrier();
}

// Storage buffer declarations; ray extension test work queue
layout(binding = 4) restrict readonly buffer b_buff_extend_head { uint n;      } buff_extend_work_head; // Size of work queue
layout(binding = 5) restrict          buffer b_buff_extend_data { Ray  data[]; } buff_extend_work_data; // Work ray data

// Extension ray test entry point
void main() {
  // Load shared memory for scene intersection
  load_isct_shared();
  
  // Thread index is work index
  const uint i = gl_GlobalInvocationID.x;
  guard(i < buff_extend_work_head.n);

  // Load ray data from buffer
  Ray ray = buff_extend_work_data.data[i];

  // Store updated result on change
  if (ray_intersect_scene(ray)) {
    buff_extend_work_data.data[i] = ray;
  }
}