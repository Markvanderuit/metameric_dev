#include <preamble.glsl>
#include <guard.glsl>
#include <bvh.glsl>
#include <gbuffer.glsl>
#include <distribution.glsl>
#include <math.glsl>
#include <random_uniform.glsl>
#include <spectrum.glsl>
#include <scene.glsl>

// General layout rule declarations
layout(local_size_x_id = 0, local_size_y_id = 1) in;
layout(std140) uniform;
layout(std430) buffer;

// Specialization constant declarations
layout(constant_id = 2) const uint max_depth = 4;     // Maximum path depth
layout(constant_id = 3) const bool is_query  = false; // Whether path query mode is eanbled

// Uniform buffer declarations
layout(binding = 0) uniform b_buff_sensor {
  mat4  full_trf;
  mat4  proj_trf;
  mat4  view_trf;
  uvec2 film_size; 
} buff_sensor;
layout(binding = 1) uniform b_buff_query {
  vec3 origin;    uint p0;
  vec3 direction; uint p1;
  uint n_paths; 
} buff_query;
layout(binding = 2) uniform b_buff_sampler_state {
  uint spp_per_iter;
  uint spp_curr;
} buff_sampler_state;
layout(binding = 3) uniform b_buff_objects {
  uint n;
  ObjectInfo data[max_supported_objects];
} buff_objects;
layout(binding = 4) uniform b_buff_meshes {
  uint n;
  MeshInfo data[max_supported_meshes];
} buff_meshes;
layout(binding = 5) uniform b_buff_textures {
  TextureInfo data[max_supported_textures];
} buff_textures;
layout(binding = 6) uniform b_buff_emitters {
  uint n;
  EmitterInfo data[max_supported_objects];
} buff_emitters;
layout(binding = 7) uniform b_buff_wvls_distr {
  float func_sum;
  float func[wavelength_samples];
  float cdf[wavelength_samples + 1];
} buff_wvls_distr;


// Storage buffer declarations
layout(binding = 0) restrict readonly buffer b_buff_bvhs_node {
  BVHNodePack data[];
} buff_bvhs_node;
layout(binding = 1) restrict readonly buffer b_buff_bvhs_prim {
  BVHPrimPack data[];
} buff_bvhs_prim;
layout(binding = 2) restrict readonly buffer b_buff_mesh_vert {
  BVHVertPack data[];
} buff_mesh_vert;
layout(binding = 3) restrict readonly buffer b_buff_mesh_elem {
  uvec3 data[];
} buff_mesh_elem;
layout(binding = 4) restrict readonly buffer b_buff_weights {
  AtlasLayout data[max_supported_objects];
} buff_weights;

// Texture unit, ergo sampler declarations
layout(binding = 0) uniform sampler2DArray b_txtr_1f; // Alpha texture atlas
layout(binding = 1) uniform sampler2DArray b_txtr_3f; // RGB texture atlas
layout(binding = 2) uniform sampler2DArray b_bary_4f; // Uplifting weight atlas
layout(binding = 3) uniform sampler1DArray b_spec_4f; // Uplifting spectral atlas
layout(binding = 4) uniform sampler1DArray b_illm_1f; // Illuminant function data, 1 component
layout(binding = 5) uniform sampler1DArray b_cmfs_3f; // Observer function data, 3 components

// TODO wait this is allowed?!?!?!
// Shiiiiiit
sampler2DArray test_func(in sampler2DArray txtr) {
  return txtr;
}

// Image unit, output declaration
layout(binding = 0, rgba32f) uniform restrict image2D b_film;

// Shared memory declarations
shared ObjectInfo  s_objc_info[max_supported_objects];
shared EmitterInfo s_emtr_info[max_supported_objects];
shared MeshInfo    s_mesh_info[max_supported_meshes];

// Declare wavelength sampling distribution
declare_distr_sampler(wavelength, buff_wvls_distr)

// Part of mesh data comes from storage buffers, part
// comes from shared memory
declare_scene_mesh_data(buff_mesh_vert.data, 
                        buff_mesh_elem.data, 
                        buff_bvhs_prim.data, 
                        buff_bvhs_node.data,
                        s_mesh_info, buff_meshes.n);

// Traversal stack lives in shared memory, depth 16
declare_scene_traversal_stack(16);

// Object and emitter data come from shared memory
declare_scene_object_data(s_objc_info, buff_objects.n);
declare_scene_emitter_data(s_emtr_info, buff_emitters.n);

#include <surface.glsl>
#include <intersect.glsl>
#include <emitter.glsl>

// Define names of scene buffers to replace preproc in brdf.glsl
// to work around glsl's lack of ssbo argument passing
#define brdf_buff_objc_info s_objc_info
#define brdf_buff_bary_info buff_weights.data
#define brdf_txtr_bary      b_bary_4f
#define brdf_txtr_spec      b_spec_4f
#include <brdf.glsl>

// ////

#define scene_buff_mesh_vert  buff_mesh_vert.data
#define scene_buff_mesh_elem  buff_mesh_elem.data
#define scene_buff_mesh_prim  buff_bvhs_prim.data
#define scene_buff_mesh_node  buff_bvhs_node.data

#define scene_buff_mesh_info  s_mesh_info
#define scene_buff_mesh_count buff_meshes.n

#define scene_buff_emtr_info  s_emtr_info
#define scene_buff_emtr_count buff_emitters.n

#define scene_buff_objc_info  s_objc_info
#define scene_buff_objc_count buff_objects.n

#define scene_buff_bary_info  buff_weights.data
#define scene_buff_bary_txtr  b_bary_4f
#define scene_buff_wvls_distr b_spec_4f
#define scene_buff_spec_txtr  b_spec_4f
// #define scene_buff_emtr_distr  b_spec_4f

void load_shared() {
  for (uint i = gl_LocalInvocationID.x; i < buff_objects.n; i += gl_WorkGroupSize.x) {
    s_objc_info[i] = buff_objects.data[i];
  }
  for (uint i = gl_LocalInvocationID.x; i < buff_meshes.n; i += gl_WorkGroupSize.x) {
    s_mesh_info[i] = buff_meshes.data[i];
  }
  for (uint i = gl_LocalInvocationID.x; i < buff_emitters.n; i += gl_WorkGroupSize.x) {
    s_emtr_info[i] = buff_emitters.data[i];
  }
  memoryBarrierShared();
  barrier();
}

uint load_state() {
  // Initial sample state is seeded from pixel index, and rotated by multiplication
  uint invoc_state = 1 
                   + gl_GlobalInvocationID.x 
                   + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
  return invoc_state * (1 + buff_sampler_state.spp_curr);
}

vec3 sample_colsys(in uint colsys_i, in float wvl) {
  // TODO sample by observer data instead
  return texture(b_cmfs_3f, vec2(wvl, colsys_i)).xyz; // TODO fix integration through exposure
}

mat4x3 sample_colsys(in uint colsys_i, in vec4 wvl) {
  mat4x3 csys;
  for (uint i = 0; i < 4; ++i)
    csys[i] = sample_colsys(colsys_i, wvl[i]);
  return csys;
}

Ray ray_from_sensor(in ivec2 i, in vec2 sample_2d) {
  // Get necessary sensor information
  float tan_y    = 1.f / buff_sensor.proj_trf[1][1];
  float aspect   = float(buff_sensor.film_size.x) / float(buff_sensor.film_size.y);
  mat4  view_inv = inverse(buff_sensor.view_trf);

  // Get pixel center in [-1, 1]
  // vec2 xy = (vec2(i) + 0.5) / vec2(buff_sensor.film_size);
  vec2 xy = (vec2(i) + sample_2d) / vec2(buff_sensor.film_size);
  xy = (xy - .5f) * 2.f;
  
  // Generate camera ray
  Ray ray;
  ray.o = (view_inv * vec4(0, 0, 0, 1)).xyz;
  ray.d = normalize((view_inv * vec4(xy.x * tan_y * aspect, xy.y * tan_y, -1, 0)).xyz);
  ray.t = FLT_MAX;

  return ray;
}

Ray ray_from_query() {
  return init_ray(buff_query.origin, buff_query.direction);
}

float rotate_sample_1d(in float sample_1d, in uint i, in uint n) {
  return mod(sample_1d + float(i) / float(n), 1.f);
}

float mis_balance(in float pdf_a, in float pdf_b) {
  return pdf_a / (pdf_a + pdf_b);
}

float mis_power(in float pdf_a, in float pdf_b) {
  pdf_a *= pdf_a;
  pdf_b *= pdf_b;
  return pdf_a / (pdf_a + pdf_b);
}

// Sample radiance along ray and wavelengths
vec4 Li(in Ray ray, in vec4 wvls, in uint state, inout vec3 debug_color) {
  // Path throughput information; we track 4 wavelengths simultaneously
  vec4  radiance        = vec4(0.f);
  vec4  throughput      = vec4(1.f);
  float prev_bsdf_pdf   = 1.f;
  bool  prev_bsdf_delta = true;
  
  // Iterate up to maximum depth
  for (uint depth = 0; depth < max_depth; ++depth) {
    // If the ray misses, terminate current path
    if (!ray_intersect(ray))
      break;

    // If no surface object is visible, terminate current path
    SurfaceInfo si = get_surface_info(ray);
    if (!is_valid(si))
      break;

    // If an emissive object is hit directly, add contribution to path
    if (is_emitter(si)) {
      PositionSample ps = get_position_sample(si);
      vec4           L  = eval_emitter(ps, wvls);

      float emtr_pdf = prev_bsdf_delta ? 0.f : pdf_emitters(ps);
      float weight   = mis_power(prev_bsdf_pdf, emtr_pdf);
      
      radiance += throughput * L * weight;

      break;
    }

    // Sample BRDF at position
    BRDFInfo brdf = get_brdf(si, wvls);
    
    // Direct illumination sampling;
    {
      // Generate emitter sample position, and ray towards position,
      // and then evaluate BRDF along that ray
      PositionSample ps       = sample_emitters(si, next_3d(state));
      float          bsdf_pdf = pdf_brdf(brdf, si, ps.d);
      
      // If the sample position has potential throughput, evaluate a ray towards
      // the position  
      if (ps.pdf != 0.f && bsdf_pdf != 0.f && dot(ps.d, si.sh.n) > 0.f) {
        Ray ray = ray_towards_point(si, ps.p);
        if (!ray_intersect_any(ray)) {
          // On a success, add contribution to path
          vec4  L = eval_emitter(ps, wvls) / ps.pdf;
          vec4  f = eval_brdf(brdf, si, ps.d);

          float weight = mis_power(ps.pdf, prev_bsdf_pdf * bsdf_pdf);
          radiance    += throughput * f * L * weight;
        }
      }
    }

    // BRDF sampling; 
    {
      BRDFSample bs = sample_brdf(brdf, next_2d(state), si);
      if (bs.pdf == 0.f)
        break;
      
      // Update throughput
      throughput     *= bs.f;
      if (all(iszero(throughput)))
        break;

      // Store previous BRDF information for MIS
      prev_bsdf_pdf   = bs.pdf;
      prev_bsdf_delta = bs.is_delta;

      // Generate next scene ray
      ray = ray_towards_direction(si, bs.wo);
    }

    // TODO RR goes here
    // ...
  } // for (uint depth)

  return radiance;
}

void main() {
  load_shared();

  // Clamp invocations to requested size
  if (is_query) {
    guard(gl_GlobalInvocationID.x < buff_query.n_paths);
  } else {
    guard(all(lessThan(ivec2(gl_GlobalInvocationID.xy), buff_sensor.film_size)));
  }

  // Initialize sampler state
  uint state = load_state();

  // Generate initial sensor/query ray
  Ray ray = is_query
          ? ray_from_query()
          : ray_from_sensor(ivec2(gl_GlobalInvocationID.xy), next_2d(state));

  // Generate path wavelengths
  float wvl_sample = next_1d(state);
  vec4 wvls, wvl_pdfs;
  for (uint i = 0; i < 4; ++i) {
    // Pass stratified wavelength sample through inverse cdf
    float wvl_rotated = rotate_sample_1d(wvl_sample, i, 4);
    DistributionSample ds = sample_wavelength(wvl_rotated);
    wvls[i]     = ds.f;
    wvl_pdfs[i] = ds.pdf;

    // Naive alternative
    // wvls[i]     = next_1d(state);
    // wvl_pdfs[i] = 1.f;

    // Fixed wavelength
    // wvls[i]     = 0.2;
    // wvl_pdfs[i] = 1.f;
  }

  // Evaluate ray/wavelength pair
  vec3 debug_color = vec3(0);
  vec4 L = Li(ray, wvls, state, debug_color) / wvl_pdfs;

  // Store output
  if (is_query) {
    // ...
  } else {
    // Integrate radiance over color system to get color
    vec3 value = sample_colsys(0, wvls) * L;
    
    // Add prior accumulated average from image
    if (buff_sampler_state.spp_curr > 0) {
      vec3 prev = imageLoad(b_film, ivec2(gl_GlobalInvocationID.xy)).xyz;
      value = prev
            + (value - prev)
            / float(buff_sampler_state.spp_curr + buff_sampler_state.spp_per_iter);
    }

    // TODO remove
    if (any(notEqual(debug_color, vec3(0))))
      value = debug_color;
    
    // Store updated image value and sample state
    imageStore(b_film, ivec2(gl_GlobalInvocationID.xy), vec4(value, 1));
  }
}