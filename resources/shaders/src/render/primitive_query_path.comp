#include <preamble.glsl>
#include <math.glsl>
#include <spectrum.glsl>
#include <distribution.glsl>
#include <sampler/uniform.glsl>
#include <render/detail/path_types.glsl>
#include <render/detail/scene_types.glsl>
#include <render/load/bvh.glsl>
#include <render/load/cmfs.glsl>
#include <render/load/emitter.glsl>
#include <render/load/illuminant.glsl>
#include <render/load/object.glsl>
#include <render/load/texture.glsl>
#include <render/load/defaults.glsl>

// General layout rule declarations
layout(local_size_x_id = 0) in;
layout(std140) uniform;
layout(std430) buffer;

// Specialization constant declarations
layout(constant_id = 1) const uint max_depth = 4;     // Maximum path depth
layout(constant_id = 2) const bool use_debug = false; // Override and enable debug queries

// Uniform buffer declarations
layout(binding = 0) uniform b_buff_sensor {
  mat4  full_trf;
  mat4  proj_trf;
  mat4  view_trf;
  uvec2 film_size;
  uvec2 pixel;
} buff_sensor;
layout(binding = 1) uniform b_buff_query {
  uint spp;
} buff_query;
layout(binding = 2) uniform b_buff_objects {
  uint n;
  ObjectInfo data[met_max_objects];
} buff_objects;
layout(binding = 3) uniform b_buff_meshes {
  uint n;
  MeshInfo data[met_max_meshes];
} buff_meshes;
layout(binding = 4) uniform b_buff_emitters {
  uint n;
  EmitterInfo data[met_max_emitters];
} buff_emitters;
layout(binding = 5) uniform b_buff_wvls_distr {
  float func_sum;
  float func[wavelength_samples];
  float cdf[wavelength_samples + 1];
} buff_wvls_distr;
layout(binding = 6) uniform b_buff_emitters_distr {
  float func_sum;
  float func[met_max_emitters];
  float cdf[met_max_emitters + 1];
} buff_emitters_distr;
layout(binding = 7) uniform b_buff_envmap_info {
  bool envm_is_present;
  uint envm_i;
} buff_envmap_info;
layout(binding = 8) uniform b_buff_coef {
  uint n;
  AtlasInfo data[met_max_textures];
} buff_coef;
layout(binding = 9) uniform b_buff_brdf {
  uint n;
  AtlasInfo data[met_max_textures];
} buff_brdf;

// Storage buffer declarations
layout(binding = 0) restrict readonly buffer b_buff_bvhs_node0 { BVHNode0Pack data[]; } buff_bvhs_node0;
layout(binding = 1) restrict readonly buffer b_buff_bvhs_node1 { BVHNode1Pack data[]; } buff_bvhs_node1;
layout(binding = 2) restrict readonly buffer b_buff_bvhs_prim  { MeshPrimPack data[]; } buff_bvhs_prim;
layout(binding = 3) restrict coherent buffer b_buff_output { 
  uint head;
  uint padd[3]; /* align head to 16 bytes */ 
  Path data[];
} buff_output;

// Texture/image units, ergo samplers and output images
layout(binding = 0) uniform sampler1DArray  b_illm_1f; // Illuminant function data, 1 component
layout(binding = 1) uniform sampler1DArray  b_cmfs_3f; // Observer function data, 3 components
layout(binding = 2) uniform sampler1DArray  b_bsis_1f; // Basis function data, 1 component
layout(binding = 3) uniform usampler2DArray b_coef_4f; // Texture atlas storing packed coefficients for surface reflectance
layout(binding = 4) uniform usampler2DArray b_brdf_2f; // Texture atlas storing packed secondary brdf data

// Declare scene data; creates functions to access and interact with
// scene data without knowing the exact names of buffers, textures, etc
declare_distr_sampler(wavelength, buff_wvls_distr, wavelength_samples)
declare_distr_sampler(emitters, buff_emitters_distr, met_max_emitters)
declare_scene_cmfs_data(b_cmfs_3f);
declare_scene_illuminant_data(b_illm_1f);
declare_scene_emitter_data(buff_emitters.data, buff_emitters.n, buff_envmap_info);
declare_scene_object_data(buff_objects.data, buff_objects.n);
declare_scene_texture_data(buff_coef.data, buff_brdf.data, b_coef_4f, b_brdf_2f, b_bsis_1f);
declare_scene_bvh_data(buff_bvhs_prim.data, buff_bvhs_node0.data, buff_bvhs_node1.data, buff_meshes.data, buff_meshes.n);
declare_path_data(buff_output.head, buff_output.data);

// All includes from here on rely on the necessary buffers/samplers to be declared
#define ENABLE_PATH_QUERY
#include <render/path.glsl>

void main() {
  // Clamp invocations to requested size
  guard(gl_GlobalInvocationID.x < buff_query.spp);

  // Initialize sampler and generate sensor sample
  SamplerState state         = gl_GlobalInvocationID.x;
  SensorSample sensor_sample = sample_sensor(PixelSensor(
    buff_sensor.proj_trf,
    buff_sensor.view_trf,
    buff_sensor.film_size,
    buff_sensor.pixel
  ), next_3d(state));
  
  // Sample incident radiance along ray for given wavelengths, weighted by probability
  // Discard return value; path query statements will handle output
  float alpha;
  Li(sensor_sample, state, alpha);
}