#include <preamble.glsl>
#include <math.glsl>
#include <render/record.glsl>
#include <render/load/defaults.glsl>

// General layout rule declarations
layout(local_size_x = 16, local_size_y = 16) in;
layout(std430) buffer;
layout(std140) uniform;

// Uniform buffer declarations
layout(binding = 0) uniform b_buff_unif {
  uint object_i;
} buff_unif;
layout(binding = 1) uniform b_buff_atlas {
  uint n;
  AtlasInfo data[met_max_textures];
} buff_atlas;
layout(binding = 2) uniform b_buff_objects {
  uint n;
  Object data[met_max_objects];
} buff_objects;
layout(binding = 3) uniform b_buff_textures {
  uint n;
  TextureInfo data[met_max_textures];
} buff_textures;

// Image/sampler declarations
layout(binding = 0)          uniform sampler2DArray                  b_txtr_3f; // Input 3-component textures
layout(binding = 1)          uniform sampler2DArray                  b_txtr_1f; // Input 1-component textures
layout(binding = 0, rgba32f) uniform restrict writeonly image2DArray b_atlas;   // Output coefficient texture atlas

void main() {
  // Load relevant object/patch data
  Object    object = buff_objects.data[buff_unif.object_i];
  AtlasInfo atlas  = buff_atlas.data[buff_unif.object_i];
  
  // Determine pixel location in padded patch, then clamp invocations to
  // relevant region; the atlas patch plus a 2px padding border for oversampling
  const uvec2 px_out = gl_GlobalInvocationID.xy + atlas.offs;
  guard(clamp(px_out, atlas.offs, atlas.offs + atlas.size - 1) == px_out);

  // Output value; [roughness, metallic], [normal]
  vec2 p;
  vec3 n;

  // First, sample roughness value from object
  if (record_is_sampled(object.roughness_data)) {
    // Determine pixel location in texture atlas
    TextureInfo txtr = buff_textures.data[record_get_sampler_index(object.roughness_data)];
    const uvec2 px_in = clamp(gl_GlobalInvocationID.xy + txtr.offs, txtr.offs, txtr.offs + txtr.size - 1);

    // Value is supplied by scene texture; could be b_txtr_3f or b_txtr_1f
    if (txtr.is_3f) {
      const vec2 tx_in = clamp((vec2(px_in) + 0.5f)
                       / textureSize(b_txtr_3f, 0).xy, vec2(0), vec2(1));
      p.x = texture(b_txtr_3f, vec3(tx_in, txtr.layer)).x;
    } else {
      const vec2 tx_in = clamp((vec2(px_in) + 0.5f)
                       / textureSize(b_txtr_1f, 0).xy, vec2(0), vec2(1));
      p.x = texture(b_txtr_1f, vec3(tx_in, txtr.layer)).x;
    }
  } else {
    p.x = record_get_direct_value(object.roughness_data);
  }
  
  // Then, sample metallic value from object
  if (record_is_sampled(object.metallic_data)) {
    // Determine pixel location in texture atlas
    TextureInfo txtr = buff_textures.data[record_get_sampler_index(object.metallic_data)];
    const uvec2 px_in = clamp(gl_GlobalInvocationID.xy + txtr.offs, txtr.offs, txtr.offs + txtr.size - 1);

    // Value is supplied by scene texture; could be b_txtr_3f.x or b_txtr_1f
    if (txtr.is_3f) {
      const vec2 tx_in = clamp((vec2(px_in) + 0.5f)
                       / textureSize(b_txtr_3f, 0).xy, vec2(0), vec2(1));
      p.y = texture(b_txtr_3f, vec3(tx_in, txtr.layer)).x;
    } else {
      const vec2 tx_in = clamp((vec2(px_in) + 0.5f)
                       / textureSize(b_txtr_1f, 0).xy, vec2(0), vec2(1));
      p.y = texture(b_txtr_1f, vec3(tx_in, txtr.layer)).x;
    }
  } else {
    p.y =  record_get_direct_value(object.metallic_data);
  }

  // Then, query normalmap data from object
  if (record_is_optional_set(object.normalmap_data)) {
    TextureInfo txtr  = buff_textures.data[record_get_optional_value(object.normalmap_data)];
    const uvec2 px_in = clamp(gl_GlobalInvocationID.xy + txtr.offs, txtr.offs, txtr.offs + txtr.size - 1);
    
    // Value is supplied by scene texture; should only allow b_txtr_3f
    if (txtr.is_3f) {
      const vec2 tx_in = clamp((vec2(px_in) + 0.5f)
                       / textureSize(b_txtr_3f, 0).xy, vec2(0), vec2(1));
      n = normalize(texture(b_txtr_3f, vec3(tx_in, txtr.layer)).xyz * 2.f - 1.f);
    } else {
      // Fallback
      n = vec3(0, 0, 1);
    }
  } else {
    // Fallback
    n = vec3(0, 0, 1);
  }

  // Finally, write packed result out to atlas
  vec4 v = vec4(p, pack_normal_octahedral(n));
  imageStore(b_atlas, ivec3(px_out, atlas.layer), v);
  // imageStore(b_atlas, ivec3(px_out, atlas.layer), uintBitsToFloat(uvec4(packHalf2x16(p), 1, 1, 1)));
}