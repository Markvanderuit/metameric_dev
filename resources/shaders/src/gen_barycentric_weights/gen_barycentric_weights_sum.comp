#version 460 core

#include <guard.glsl>
#include <math.glsl>
#include <spectrum.glsl>

#define Bary float[barycentric_weights]

// General layout rule declarations
layout(local_size_x = 256) in;
layout(std430)             buffer;

// Shader storage buffer declarations
layout(binding = 0) restrict readonly  buffer b_0 { Bary  data[]; } b_bary_in;
layout(binding = 1) restrict writeonly buffer b_1 { float data[]; } b_bsum_out;

// Uniform buffer declarations
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_verts;
  uint n_elems;
} b_size;

#define weights_iter(__b)      for (uint __b = 0; __b < b_size.n_verts; ++__b)
#define weights_iter_full(__b) for (uint __b = 0; __b < barycentric_weights; ++__b)

void main() {
  const uint i = gl_GlobalInvocationID.x;
  guard(i < b_size.n);

  Bary b = b_bary_in.data[i];
  float weight_sum = 0.f;
  weights_iter(j) weight_sum += b[j];
  b_bsum_out.data[i] = weight_sum;
}