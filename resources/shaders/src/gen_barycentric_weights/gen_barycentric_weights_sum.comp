#version 460 core

#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_clustered  : require

#include <guard.glsl>
#include <math.glsl>
#include <bary.glsl>

// General layout rule declarations
layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

// Shader storage buffer declarations
layout(binding = 0) restrict readonly  buffer b_0 { Bary4 data[]; } b_bary_in;
layout(binding = 1) restrict writeonly buffer b_1 { float data[]; } b_bsum_out;

// Uniform buffer declarations
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_verts;
  uint n_elems;
} b_unif;

const uint sg_cluster_size = barycentric_weights / 4;

void main() {
  const uint i  = gl_GlobalInvocationID.x / sg_cluster_size; // 000011112222
  const uint j  = gl_GlobalInvocationID.x % sg_cluster_size; // 012301230123

  guard(i < b_unif.n);

  float s = hsum(subgroupClusteredAdd(b_bary_in.data[i][j], sg_cluster_size));

  if (j == 0)
    b_bsum_out.data[i] = s;
}