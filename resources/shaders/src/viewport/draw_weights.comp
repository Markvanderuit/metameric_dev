#version 460 core

#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_clustered  : require

#include <guard.glsl>
#include <math.glsl>
#include <spectrum.glsl>

#define Wght float[barycentric_weights]

// General layout rule declarations
layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

// Shader storage buffer declarations
layout(binding = 0) restrict readonly  buffer b_0 { Wght  data[]; } b_bary_in;
layout(binding = 1) restrict writeonly buffer b_1 { float data[]; } b_sum_out;

// Uniform buffer declarations
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_verts;
  uint selection[barycentric_weights];
} b_unif;

void main() {
  const uint i = gl_GlobalInvocationID.x / barycentric_weights;
  const uint j = gl_GlobalInvocationID.x % barycentric_weights;
  guard(i < b_unif.n);
  
  float f = (j < b_unif.n_verts && b_unif.selection[j] != 0)
          ? b_bary_in.data[i][j] 
          : 0.f;
  float s = subgroupClusteredAdd(f, barycentric_weights);

  if (j == 0);
    b_sum_out.data[i] = s;
}