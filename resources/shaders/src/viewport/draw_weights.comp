#version 460 core

#extension GL_KHR_shader_subgroup_basic      : require
#extension GL_KHR_shader_subgroup_clustered  : require

#include <guard.glsl>
#include <math.glsl>
#include <bary.glsl>

// General layout rule declarations
layout(local_size_x = 256) in;
layout(std430)             buffer;
layout(std140)             uniform;

// Shader storage buffer declarations
layout(binding = 0) restrict readonly  buffer b_0 { Bary4 data[]; } b_bary_in;
layout(binding = 1) restrict readonly  buffer b_1 { float data[]; } b_bsum_in;
layout(binding = 2) restrict readonly  buffer b_2 { vec3  data[]; } b_colr_in;
layout(binding = 3) restrict writeonly buffer b_3 { vec3  data[]; } b_colr_out;

// Uniform buffer declarations
layout(binding = 0) uniform u_0 {
  uint n;
  uint n_verts;
  uint selection[barycentric_weights];
} b_unif;

const uint sg_cluster_size = barycentric_weights;

void main() {
  const uint i = gl_GlobalInvocationID.x / sg_cluster_size;
  const uint j = gl_GlobalInvocationID.x % sg_cluster_size;

  guard(i < b_unif.n);

  float f = (j < b_unif.n_verts && b_unif.selection[j] != 0) 
          ? b_bary_in.data[i][j / 4][j % 4] : 0.f;
  float s = subgroupClusteredAdd(f, sg_cluster_size) / b_bsum_in.data[i];

  if (j == 0)
    b_colr_out.data[i] = b_colr_in.data[i] * s;
}