#version 460 core

#include <guard.glsl>

// General layout rule declarations
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(std430) buffer;
layout(std140) uniform;

layout(binding = 0)          restrict readonly buffer           b_0 { vec3 data[];  } b_colr_in;
layout(binding = 1)          restrict readonly buffer           b_1 { float data[]; } b_sums_in;
layout(binding = 0, rgba32f) restrict writeonly uniform image2D b_img_out;

layout(location = 0) uniform uvec2 u_size;

void main() {
  const uvec2 v = gl_GlobalInvocationID.xy;
  guard(min(v, u_size - 1) == v);

  vec3  c = b_colr_in.data[u_size.x * v.y + v.x];
  float s = b_sums_in.data[u_size.x * v.y + v.x];

  imageStore(b_img_out, ivec2(v), vec4(c * s, 1));
}